// <auto-generated />
using System;
using BookEcommerceNET.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookEcommerceNET.Migrations
{
    [DbContext(typeof(ShopdbContext))]
    partial class ShopdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookEcommerceNET.Models.Cart", b =>
                {
                    b.Property<long>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cart_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("CartId"));

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("CartId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "FK3d704slv66tw6x5hmbm6p2x3u");

                    b.HasIndex(new[] { "UserId" }, "FKl70asp4l4w0jmbm1tqyofho4o");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("OrderId"));

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "FKcpl0mjoeqhxvgeeeq5piwpd3i");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("BookEcommerceNET.Models.OrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "FKb7sieybjsoa6140mh8fsqnge8");

                    b.HasIndex(new[] { "OrderId" }, "FKhva1mlxebnkr41a5n7a8l1nhg");

                    b.ToTable("order_products", (string)null);
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("payment_mode");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("payment_status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "FK6lrptjdw63jddlg0lsd38oox5");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Product", b =>
                {
                    b.Property<long?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long?>("ProductId"));

                    b.Property<long?>("AddedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("added_by_user_id");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<byte[]>("ProductImage")
                        .HasColumnType("longblob")
                        .HasColumnName("product_image");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<double>("Quantity")
                        .HasColumnType("double")
                        .HasColumnName("quantity");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "FK1mtsbur82frn64de7balymq9s");

                    b.HasIndex(new[] { "AddedByUserId" }, "FKpr8hw2vceb4seg04iwryg5txn");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("BookEcommerceNET.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Pincode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pincode");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Cart", b =>
                {
                    b.HasOne("BookEcommerceNET.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK3d704slv66tw6x5hmbm6p2x3u");

                    b.HasOne("BookEcommerceNET.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FKl70asp4l4w0jmbm1tqyofho4o");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Order", b =>
                {
                    b.HasOne("BookEcommerceNET.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKcpl0mjoeqhxvgeeeq5piwpd3i");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.OrderProduct", b =>
                {
                    b.HasOne("BookEcommerceNET.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FKhva1mlxebnkr41a5n7a8l1nhg");

                    b.HasOne("BookEcommerceNET.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FKb7sieybjsoa6140mh8fsqnge8");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Payment", b =>
                {
                    b.HasOne("BookEcommerceNET.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK6lrptjdw63jddlg0lsd38oox5");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Product", b =>
                {
                    b.HasOne("BookEcommerceNET.Models.User", "AddedByUser")
                        .WithMany("Products")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FKpr8hw2vceb4seg04iwryg5txn");

                    b.HasOne("BookEcommerceNET.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK1mtsbur82frn64de7balymq9s");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BookEcommerceNET.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
